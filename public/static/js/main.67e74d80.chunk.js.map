{"version":3,"sources":["components/modifiedSnackbarContent.jsx","components/nameDialog.jsx","components/messageInput.jsx","components/drawerContent.jsx","components/message.jsx","components/chat.jsx","socket.js","App.js","serviceWorker.js","index.js"],"names":["ModifiedSnackbarContent","props","message","variant","console","log","react_default","a","createElement","SnackbarContent","style","backgroundColor","display","alignItems","Error_default","fontSize","opacity","marginRight","CheckCircle_default","NameDialog","state","dialogOpen","snackbarOpen","fullName","handleDialogClose","_this","trim","split","length","setState","localStorage","setItem","onDone","handleSnakbarClose","event","reason","handleNameChanged","target","value","_this2","this","fullScreen","Dialog","open","DialogTitle","DialogContent","DialogContentText","autoComplete","TextField","margin","label","onChange","onKeyPress","key","preventDefault","fullWidth","DialogActions","Button","color","onClick","Snackbar","anchorOrigin","vertical","horizontal","onClose","autoHideDuration","modifiedSnackbarContent","Component","withMobileDialog","MessageInput","text","handleMessageChanged","handleSendMessage","onSend","fullname","user","Paper","width","elevation","Avatar","red","toUpperCase","InputBase","marginLeft","flex","placeholder","Divider","height","IconButton","aria-label","SendOutlined_default","DrawerContent","users","Fragment","justifyContent","SupervisorAccountOutlined_default","List","component","map","ListItem","id","button","textOverflow","overflow","whiteSpace","marginTop","textAlign","Message","_this$props$message","sender","time","Card","CardHeader","avatar","title","subheader","dateformat","CardContent","Typography","wordBreak","Chat","messages","GridList","msg","components_message","socket","io","configureSocket","dispatch","on","error","connect","emitNewUser","emit","emitNewMessage","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","data","setTimeout","connected","scroll","scrollToBottom","toConsumableArray","push","loading","filter","document","location","reload","onNameSelected","handleDrawerToggle","mobileOpen","getSnackbarVariant","_this$state","getItem","_this$state2","_this$props","classes","theme","className","CircularProgress","nameDialog","drawer","drawerWidth","drawerContent","root","CssBaseline","AppBar","position","appBar","Toolbar","menuButton","Menu_default","messageInput","Hidden","smUp","implementation","Drawer","container","anchor","direction","paper","drawerPaper","xsDown","content","chat","toolbar","withStyles","_appBar","defineProperty","breakpoints","up","flexShrink","concat","mixins","flexGrow","padding","spacing","unit","withTheme","Boolean","window","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67e74d80.chunk.js","sourcesContent":["import React from 'react';\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport SuccessIcon from '@material-ui/icons/CheckCircle';\r\n\r\nfunction ModifiedSnackbarContent(props) {\r\n  const { message, variant } = props;\r\n  console.log(props);\r\n\r\n  if (variant === 'error') {\r\n    return (\r\n      <SnackbarContent\r\n        style={{ backgroundColor: '#d22e2e' }}\r\n        message={\r\n          <span style={{ display: 'flex', alignItems: 'center' }}>\r\n            <ErrorIcon\r\n              style={{\r\n                fontSize: 20,\r\n                opacity: 0.9,\r\n                marginRight: 25\r\n              }}\r\n            />\r\n            {message}\r\n          </span>\r\n        }\r\n      />\r\n    );\r\n  } else if (variant === 'success') {\r\n    return (\r\n      <SnackbarContent\r\n        style={{ backgroundColor: '#46C646' }}\r\n        message={\r\n          <span style={{ display: 'flex', alignItems: 'center' }}>\r\n            <SuccessIcon\r\n              style={{\r\n                fontSize: 20,\r\n                opacity: 0.9,\r\n                marginRight: 25\r\n              }}\r\n            />\r\n            {message}\r\n          </span>\r\n        }\r\n      />\r\n    );\r\n  } else {\r\n    return <h4>NO CONTENT</h4>;\r\n  }\r\n}\r\n\r\nexport default ModifiedSnackbarContent;\r\n","import React, { Component } from 'react';\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  Snackbar,\r\n  withMobileDialog\r\n} from '@material-ui/core';\r\nimport ModifiedSnackbarContent from './modifiedSnackbarContent';\r\n\r\nclass NameDialog extends Component {\r\n  state = {\r\n    dialogOpen: true,\r\n    snackbarOpen: false,\r\n    fullName: null\r\n  };\r\n\r\n  handleDialogClose = () => {\r\n    const { fullName } = this.state;\r\n\r\n    if (\r\n      !fullName ||\r\n      fullName.trim() === '' ||\r\n      fullName.trim().split(' ').length < 2\r\n    ) {\r\n      this.setState({ snackbarOpen: true });\r\n    } else {\r\n      this.setState({ dialogOpen: false, snackbarOpen: false });\r\n      localStorage.setItem('USER_FULLNAME', fullName.trim());\r\n      this.props.onDone(fullName.trim());\r\n    }\r\n  };\r\n\r\n  handleSnakbarClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    this.setState({ snackbarOpen: false });\r\n  };\r\n\r\n  handleNameChanged = event => {\r\n    this.setState({\r\n      fullName: event.target.value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { fullScreen } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <Dialog fullScreen={fullScreen} open={this.state.dialogOpen}>\r\n          <DialogTitle>Your Name</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              To enter chat room you should enter your name.\r\n            </DialogContentText>\r\n            <form autoComplete=\"off\">\r\n              <TextField\r\n                margin=\"normal\"\r\n                label=\"Full Name\"\r\n                variant=\"outlined\"\r\n                onChange={this.handleNameChanged}\r\n                onKeyPress={event => {\r\n                  if (event.key === 'Enter') {\r\n                    this.handleDialogClose();\r\n                    event.preventDefault();\r\n                  }\r\n                }}\r\n                fullWidth\r\n              />\r\n            </form>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button color=\"primary\" onClick={this.handleDialogClose}>\r\n              Done\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n        <Snackbar\r\n          anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'left'\r\n          }}\r\n          open={this.state.snackbarOpen}\r\n          onClose={this.handleSnakbarClose}\r\n          autoHideDuration={3000}\r\n        >\r\n          <ModifiedSnackbarContent\r\n            message=\"You should enter first and last name!\"\r\n            variant=\"error\"\r\n          />\r\n        </Snackbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withMobileDialog()(NameDialog);\r\n","import React, { Component } from 'react';\r\nimport {\r\n  Paper,\r\n  Avatar,\r\n  IconButton,\r\n  InputBase,\r\n  Divider\r\n} from '@material-ui/core';\r\nimport red from '@material-ui/core/colors/red';\r\nimport SendIcon from '@material-ui/icons/SendOutlined';\r\n\r\nclass MessageInput extends Component {\r\n  state = {\r\n    text: ''\r\n  };\r\n\r\n  handleMessageChanged = event => {\r\n    this.setState({\r\n      text: event.target.value\r\n    });\r\n  };\r\n\r\n  handleSendMessage = text => {\r\n    if (text && text.trim() !== '' && this.props.onSend(text)) {\r\n      this.setState({ text: '' });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { text } = this.state;\r\n    const { fullname } = this.props.user;\r\n\r\n    return (\r\n      <Paper\r\n        style={{\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          width: '100%'\r\n        }}\r\n        elevation={0}\r\n      >\r\n        <Avatar style={{ margin: 8, backgroundColor: red[600] }}>\r\n          {fullname.split(' ')[0][0].toUpperCase()}\r\n          {fullname.split(' ')[1][0].toUpperCase()}\r\n        </Avatar>\r\n        <InputBase\r\n          style={{ marginLeft: 8, marginRight: 8, flex: 1 }}\r\n          onChange={this.handleMessageChanged}\r\n          placeholder=\"Type a message...\"\r\n          value={text}\r\n          onKeyPress={event => {\r\n            if (event.key === 'Enter') {\r\n              this.handleSendMessage(text);\r\n              event.preventDefault();\r\n            }\r\n          }}\r\n        />\r\n        <Divider\r\n          style={{\r\n            width: 1,\r\n            height: 64\r\n          }}\r\n        />\r\n        <IconButton\r\n          color=\"primary\"\r\n          style={{ marginLeft: 8 }}\r\n          aria-label=\"Send\"\r\n          onClick={() => this.handleSendMessage(text)}\r\n        >\r\n          <SendIcon />\r\n        </IconButton>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MessageInput;\r\n","import React, { Component } from 'react';\r\nimport { Paper, Divider, List, ListItem, Avatar } from '@material-ui/core';\r\nimport red from '@material-ui/core/colors/red';\r\nimport PeopleIcon from '@material-ui/icons/SupervisorAccountOutlined';\r\n\r\nclass DrawerContent extends Component {\r\n  render() {\r\n    const { users } = this.props;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Paper\r\n          elevation={0}\r\n          style={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            margin: 8,\r\n            color: '#808080'\r\n          }}\r\n        >\r\n          <PeopleIcon />\r\n          <h3 style={{ marginLeft: 8 }}>Connected People</h3>\r\n        </Paper>\r\n        <Divider\r\n          style={{\r\n            height: 1,\r\n            width: '100%'\r\n          }}\r\n        />\r\n        {users.length > 0 ? (\r\n          <List component=\"nav\">\r\n            {users.map(user => (\r\n              <ListItem key={user.id} button>\r\n                <Avatar style={{ backgroundColor: red[600], marginRight: 16 }}>\r\n                  {user.fullname.split(' ')[0][0].toUpperCase()}\r\n                  {user.fullname.split(' ')[1][0].toUpperCase()}\r\n                </Avatar>\r\n                <h5\r\n                  style={{\r\n                    textOverflow: 'ellipsis',\r\n                    overflow: 'hidden',\r\n                    whiteSpace: 'nowrap',\r\n                    marginRight: 8\r\n                  }}\r\n                >\r\n                  {user.fullname}\r\n                </h5>\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        ) : (\r\n          <h5\r\n            style={{\r\n              color: '#808080',\r\n              marginRight: 8,\r\n              marginLeft: 8,\r\n              marginTop: 32,\r\n              textAlign: 'center'\r\n            }}\r\n          >\r\n            No one connected yet!\r\n          </h5>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DrawerContent;\r\n","import React, { Component } from 'react';\r\nimport {\r\n  ListItem,\r\n  Avatar,\r\n  Typography,\r\n  Card,\r\n  CardHeader,\r\n  CardContent\r\n} from '@material-ui/core';\r\nimport red from '@material-ui/core/colors/red';\r\nimport dateformat from 'dateformat';\r\n\r\nclass Message extends Component {\r\n  render() {\r\n    const { text, sender, time } = this.props.message;\r\n    if (!sender) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <ListItem>\r\n        <Card style={{ width: '100%' }}>\r\n          <CardHeader\r\n            avatar={\r\n              <Avatar style={{ backgroundColor: red[600] }}>\r\n                {sender.fullname.split(' ')[0][0].toUpperCase()}\r\n                {sender.fullname.split(' ')[1][0].toUpperCase()}\r\n              </Avatar>\r\n            }\r\n            title={sender.fullname}\r\n            subheader={dateformat(time, 'dddd, mmmm dS, yyyy, h:MM:ss TT')}\r\n          />\r\n          <CardContent>\r\n            <Typography component=\"p\" style={{ wordBreak: 'break-all' }}>\r\n              {text}\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n      </ListItem>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Message;\r\n","import React, { Component } from 'react';\r\nimport { GridList } from '@material-ui/core';\r\nimport Message from './message';\r\n\r\nclass Chat extends Component {\r\n  render() {\r\n    const { messages } = this.props;\r\n\r\n    return (\r\n      <GridList\r\n        style={{\r\n          margin: 0,\r\n          width: '100%'\r\n        }}\r\n      >\r\n        {messages.map(msg => (\r\n          <Message key={msg.id} message={msg} />\r\n        ))}\r\n      </GridList>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chat;\r\n","import io from 'socket.io-client';\r\n\r\nconst socket = io('/');\r\n\r\nexport const configureSocket = dispatch => {\r\n  socket.on('connect', () => {\r\n    dispatch('connect', socket.id);\r\n    console.log('connect', socket.id);\r\n  });\r\n\r\n  socket.on('CONNECTED_USERS', users => {\r\n    // app should display connected users\r\n    dispatch('CONNECTED_USERS', users);\r\n    console.log('CONNECTED_USERS', users);\r\n  });\r\n\r\n  socket.on('SENT_MESSAGES', messages => {\r\n    // app should display previosly sent messages\r\n    dispatch('SENT_MESSAGES', messages);\r\n    console.log('SENT_MESSAGES', messages);\r\n  });\r\n\r\n  socket.on('NEW_USER', user => {\r\n    // app should store the user\r\n    dispatch('NEW_USER', user);\r\n    console.log('NEW_USER', user);\r\n  });\r\n\r\n  socket.on('USER_ID', id => {\r\n    // id === socket.id\r\n    dispatch('USER_ID', id);\r\n    console.log('USER_ID', id);\r\n  });\r\n\r\n  socket.on('NEW_MESSAGE', message => {\r\n    // app should store the message\r\n    dispatch('NEW_MESSAGE', message);\r\n    console.log('NEW_MESSAGE', message);\r\n  });\r\n\r\n  socket.on('MESSAGE_DETAILS', message => {\r\n    // app should update the message\r\n    dispatch('MESSAGE_DETAILS', message);\r\n    console.log('MESSAGE_DETAILS', message);\r\n  });\r\n\r\n  socket.on('USER_DISCONNECTED', user => {\r\n    // app should remove this user\r\n    dispatch('USER_DISCONNECTED', user);\r\n    console.log('USER_DISCONNECTED', user);\r\n  });\r\n\r\n  socket.on('ERROR', error => {\r\n    // app should be refreshed\r\n    dispatch('ERROR', error);\r\n    console.log('ERROR', error);\r\n  });\r\n\r\n  socket.on('disconnect', reason => {\r\n    if (reason === 'io server disconnect') {\r\n      socket.connect();\r\n    } else {\r\n      dispatch('disconnect', 'You are not connected...');\r\n    }\r\n  });\r\n\r\n  return socket;\r\n};\r\n\r\nexport const emitNewUser = fullname => socket.emit('NEW_USER', fullname);\r\n\r\nexport const emitNewMessage = text => socket.emit('NEW_MESSAGE', text);\r\n","import React, { Component } from 'react';\r\nimport {\r\n  Drawer,\r\n  Hidden,\r\n  CssBaseline,\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  CircularProgress,\r\n  Snackbar,\r\n  withStyles\r\n} from '@material-ui/core';\r\nimport { animateScroll as scroll } from 'react-scroll';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport NameDialog from './components/nameDialog';\r\nimport MessageInput from './components/messageInput';\r\nimport DrawerContent from './components/drawerContent';\r\nimport Chat from './components/chat';\r\nimport ModifiedSnackbarContent from './components/modifiedSnackbarContent';\r\n\r\nimport './App.css';\r\n\r\nimport { configureSocket, emitNewUser, emitNewMessage } from './socket';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    display: 'flex'\r\n  },\r\n  drawer: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0\r\n    }\r\n  },\r\n  appBar: {\r\n    marginLeft: drawerWidth,\r\n    backgroundColor: '#ffffff',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: `calc(100% - ${drawerWidth}px)`\r\n    },\r\n    top: 'auto',\r\n    bottom: 0\r\n  },\r\n  menuButton: {\r\n    color: '#808080',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'none'\r\n    }\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: drawerWidth\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing.unit * 3\r\n  }\r\n});\r\n\r\nclass App extends Component {\r\n  socket = configureSocket((event, data) => {\r\n    switch (event) {\r\n      case 'connect':\r\n        this.setState({ message: 'Connection established!' });\r\n        setTimeout(\r\n          () => this.setState({ connected: true, message: null }),\r\n          1500\r\n        );\r\n        break;\r\n      case 'CONNECTED_USERS':\r\n        this.setState({ users: data });\r\n        break;\r\n\r\n      case 'SENT_MESSAGES':\r\n        this.setState({ messages: data });\r\n        setTimeout(() => scroll.scrollToBottom(), 250);\r\n        break;\r\n      case 'NEW_USER':\r\n        {\r\n          const users = [...this.state.users];\r\n          users.push(data);\r\n          this.setState({ users });\r\n        }\r\n        break;\r\n      case 'USER_ID':\r\n        this.setState({ user: data, loading: false });\r\n        break;\r\n      case 'NEW_MESSAGE':\r\n      case 'MESSAGE_DETAILS':\r\n        {\r\n          const messages = [...this.state.messages];\r\n          messages.push(data);\r\n          this.setState({ messages });\r\n          scroll.scrollToBottom();\r\n        }\r\n        break;\r\n      case 'USER_DISCONNECTED':\r\n        {\r\n          const users = [...this.state.users].filter(\r\n            user => user.id !== data.id\r\n          );\r\n          this.setState({ users });\r\n        }\r\n        break;\r\n      case 'ERROR':\r\n        this.setState({ snackbarOpen: true, message: data });\r\n        setTimeout(() => document.location.reload(true), 3500);\r\n        break;\r\n      case 'disconnect':\r\n        this.setState({ connected: false, message: data });\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      user: null,\r\n      loading: true,\r\n      mobileOpen: false,\r\n      snackbarOpen: false,\r\n      message: null,\r\n      connected: true,\r\n      messages: [],\r\n      users: []\r\n    };\r\n\r\n    const fullname = localStorage.getItem('USER_FULLNAME');\r\n\r\n    if (fullname) {\r\n      emitNewUser(fullname);\r\n    } else {\r\n      this.state.loading = false;\r\n    }\r\n  }\r\n\r\n  onNameSelected = fullname => {\r\n    this.setState({ loading: true });\r\n    emitNewUser(fullname);\r\n  };\r\n\r\n  handleDrawerToggle = () => {\r\n    this.setState(state => ({ mobileOpen: !state.mobileOpen }));\r\n  };\r\n\r\n  handleSnakbarClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    this.setState({ snackbarOpen: false, message: null });\r\n  };\r\n\r\n  onSend = text => {\r\n    if (this.state.connected) {\r\n      emitNewMessage(text);\r\n    }\r\n    return this.state.connected;\r\n  };\r\n\r\n  getSnackbarVariant = () => {\r\n    const { message, connected, snackbarOpen } = this.state;\r\n    if (message === 'Connection established!') {\r\n      return 'success';\r\n    } else {\r\n      return snackbarOpen || !connected ? 'error' : 'success';\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      messages,\r\n      user,\r\n      users,\r\n      loading,\r\n      message,\r\n      connected,\r\n      snackbarOpen\r\n    } = this.state;\r\n    const { classes, theme } = this.props;\r\n\r\n    if (loading) {\r\n      return (\r\n        <div className=\"App-header\">\r\n          <CircularProgress color=\"secondary\" />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (!user) {\r\n      return (\r\n        <div className=\"App-header\">\r\n          <NameDialog className=\"App-header\" onDone={this.onNameSelected} />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const drawer = (\r\n      <div style={{ width: this.state.drawerWidth, marginTop: 24 }}>\r\n        <DrawerContent users={users} />\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <CssBaseline />\r\n        <AppBar position=\"fixed\" className={classes.appBar}>\r\n          <Toolbar>\r\n            <IconButton\r\n              aria-label=\"Open drawer\"\r\n              onClick={this.handleDrawerToggle}\r\n              className={classes.menuButton}\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n            <MessageInput user={user} onSend={this.onSend} />\r\n          </Toolbar>\r\n        </AppBar>\r\n        <nav className={classes.drawer}>\r\n          <Hidden smUp implementation=\"css\">\r\n            <Drawer\r\n              container={this.props.container}\r\n              variant=\"temporary\"\r\n              anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n              open={this.state.mobileOpen}\r\n              onClose={this.handleDrawerToggle}\r\n              classes={{\r\n                paper: classes.drawerPaper\r\n              }}\r\n            >\r\n              {drawer}\r\n            </Drawer>\r\n          </Hidden>\r\n          <Hidden xsDown implementation=\"css\">\r\n            <Drawer\r\n              classes={{\r\n                paper: classes.drawerPaper\r\n              }}\r\n              variant=\"permanent\"\r\n              open\r\n            >\r\n              {drawer}\r\n            </Drawer>\r\n          </Hidden>\r\n        </nav>\r\n\r\n        <main className={classes.content}>\r\n          <Chat messages={messages} />\r\n          <Snackbar\r\n            anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n            open={snackbarOpen | !connected}\r\n            onClose={snackbarOpen & connected && this.handleSnakbarClose}\r\n            autoHideDuration={snackbarOpen & connected && 3000}\r\n          >\r\n            <ModifiedSnackbarContent\r\n              message={message}\r\n              variant={this.getSnackbarVariant()}\r\n            />\r\n          </Snackbar>\r\n          <div className={classes.toolbar} />\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}